{"ast":null,"code":"import { BaseService } from \"./base.service\";\nimport { environment } from \"src/environments/environment\";\nimport { catchError, firstValueFrom, map } from \"rxjs\";\nimport { ModelContractClassificationEnum } from \"src/enums/modelContract-classification.enum\";\nimport { LanguageContractEnum } from \"src/enums/language-contract.enum\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ContractsService extends BaseService {\n  constructor(httpClient) {\n    super();\n    this.httpClient = httpClient;\n    this.url = `${environment.api.path}/contract`;\n  }\n  getContract() {\n    return this.httpClient.get(`${this.url}/list`, this.authorizedHeader).pipe(map(response => response), catchError(this.serviceError));\n  }\n  getContractById(_id) {\n    return this.httpClient.get(`${this.url}/get-by-id/` + _id, this.authorizedHeader).pipe(map(response => response), catchError(this.serviceError));\n  }\n  getContractByUserId(_id) {\n    return this.httpClient.get(`${this.url}/get-by-user-id/` + _id, this.authorizedHeader).pipe(map(response => response), catchError(this.serviceError));\n  }\n  getContractByBidId(_id) {\n    return this.httpClient.get(`${this.url}/get-by-bid/` + _id, this.authorizedHeader).pipe(map(response => response), catchError(this.serviceError));\n  }\n  updateStatuss(_id, dto) {\n    return this.httpClient.put(`${this.url}/update/${_id}`, dto).pipe(map(this.extractData), catchError(this.serviceError));\n  }\n  updateContract(_id, dto) {\n    return this.httpClient.put(`${this.url}/update-itens/${_id}`, dto, this.authorizedHeader).pipe(map(this.extractData), catchError(this.serviceError));\n  }\n  updateStatus(_id, dto) {\n    return this.httpClient.put(`${this.url}/update/${_id}`, dto, this.authorizedHeader).pipe(map(this.extractData), catchError(this.serviceError));\n  }\n  singSupplier(_id, dto) {\n    return this.httpClient.put(`${this.url}/sing-supplier/${_id}`, dto, this.authorizedHeader).pipe(map(this.extractData), catchError(this.serviceError));\n  }\n  singAssociation(_id, dto) {\n    return this.httpClient.put(`${this.url}/sing-association/${_id}`, dto, this.authorizedHeader).pipe(map(this.extractData), catchError(this.serviceError));\n  }\n  getPdf(_id, lang = LanguageContractEnum.english, type = ModelContractClassificationEnum.bens) {\n    return firstValueFrom(this.httpClient.get(`${this.url}/create-document/${_id}/${lang}/${type}`, {\n      headers: this.authorizedHeaderFile.headers\n      // responseType: \"blob\",\n    }).pipe(map(response => response)));\n  }\n  static {\n    this.ɵfac = function ContractsService_Factory(t) {\n      return new (t || ContractsService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ContractsService,\n      factory: ContractsService.ɵfac,\n      providedIn: \"root\"\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["BaseService","environment","catchError","firstValueFrom","map","ModelContractClassificationEnum","LanguageContractEnum","ContractsService","constructor","httpClient","url","api","path","getContract","get","authorizedHeader","pipe","response","serviceError","getContractById","_id","getContractByUserId","getContractByBidId","updateStatuss","dto","put","extractData","updateContract","updateStatus","singSupplier","singAssociation","getPdf","lang","english","type","bens","headers","authorizedHeaderFile","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"ignoreList":[],"sourceRoot":"","sources":["/home/anthonysfarias/apps/SOL/frontend_SOL/main/sol-frontend/src/services/contract.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { BaseService } from \"./base.service\";\nimport { environment } from \"src/environments/environment\";\nimport { Observable, catchError, firstValueFrom, map } from \"rxjs\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { acceptSupplierDto } from \"src/dtos/contratos/acceptSupplier\";\nimport { singAssociationDto } from \"src/dtos/contratos/sing-association\";\nimport { ContractUpdateStatusItemDto } from \"src/dtos/contratos/contract-update-register-request.dto\";\nimport { ModelContractClassificationEnum } from \"src/enums/modelContract-classification.enum\";\nimport { LanguageContractEnum } from \"src/enums/language-contract.enum\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ContractsService extends BaseService {\n  private url = `${environment.api.path}/contract`;\n\n  constructor(private httpClient: HttpClient) {\n    super();\n  }\n\n  getContract(): Observable<any> {\n    return this.httpClient.get(`${this.url}/list`, this.authorizedHeader).pipe(\n      map((response) => response),\n      catchError(this.serviceError)\n    );\n  }\n\n  getContractById(_id: string): Observable<any> {\n    return this.httpClient\n      .get(`${this.url}/get-by-id/` + _id, this.authorizedHeader)\n      .pipe(\n        map((response) => response),\n        catchError(this.serviceError)\n      );\n  }\n\n  getContractByUserId(_id: string): Observable<any> {\n    return this.httpClient\n      .get(`${this.url}/get-by-user-id/` + _id, this.authorizedHeader)\n      .pipe(\n        map((response) => response),\n        catchError(this.serviceError)\n      );\n  }\n\n  getContractByBidId(_id: string): Observable<any> {\n    return this.httpClient\n      .get(`${this.url}/get-by-bid/` + _id, this.authorizedHeader)\n      .pipe(\n        map((response) => response),\n        catchError(this.serviceError)\n      );\n  }\n\n  updateStatuss(_id: string, dto: acceptSupplierDto): Observable<any> {\n    return this.httpClient\n      .put(`${this.url}/update/${_id}`, dto)\n      .pipe(map(this.extractData), catchError(this.serviceError));\n  }\n\n  updateContract(\n    _id: string,\n    dto: ContractUpdateStatusItemDto\n  ): Observable<any> {\n    return this.httpClient\n      .put(`${this.url}/update-itens/${_id}`, dto, this.authorizedHeader)\n      .pipe(map(this.extractData), catchError(this.serviceError));\n  }\n\n  updateStatus(_id: string, dto: acceptSupplierDto): Observable<any> {\n    return this.httpClient\n      .put(`${this.url}/update/${_id}`, dto, this.authorizedHeader)\n      .pipe(map(this.extractData), catchError(this.serviceError));\n  }\n\n  singSupplier(_id: string, dto: singAssociationDto): Observable<any> {\n    return this.httpClient\n      .put(`${this.url}/sing-supplier/${_id}`, dto, this.authorizedHeader)\n      .pipe(map(this.extractData), catchError(this.serviceError));\n  }\n\n  singAssociation(_id: string, dto: any): Observable<any> {\n    return this.httpClient\n      .put(`${this.url}/sing-association/${_id}`, dto, this.authorizedHeader)\n      .pipe(map(this.extractData), catchError(this.serviceError));\n  }\n\n  getPdf(\n    _id: string,\n    lang: string = LanguageContractEnum.english,\n    type: ModelContractClassificationEnum = ModelContractClassificationEnum.bens\n  ) {\n    return firstValueFrom(\n      this.httpClient\n        .get(`${this.url}/create-document/${_id}/${lang}/${type}`, {\n          headers: this.authorizedHeaderFile.headers,\n          // responseType: \"blob\",\n        })\n        .pipe(map((response: any) => response))\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}